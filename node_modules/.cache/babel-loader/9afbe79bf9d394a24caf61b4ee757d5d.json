{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/mariannebourcier/werun/react-front-end/src/components/Autocomplete.jsx\";\n\n//import AutoComplete from \"react-google-autocomplete\";\nimport React from \"react\";\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\"; //import useOnclickOutside from \"react-cool-onclickoutside\";\n\nvar PlacesAutocomplete = function PlacesAutocomplete() {\n  var _usePlacesAutocomplet = usePlacesAutocomplete({\n    requestOptions: {\n      /* Define search scope here */\n    },\n    debounce: 300\n  }),\n      ready = _usePlacesAutocomplet.ready,\n      value = _usePlacesAutocomplet.value,\n      _usePlacesAutocomplet2 = _usePlacesAutocomplet.suggestions,\n      status = _usePlacesAutocomplet2.status,\n      data = _usePlacesAutocomplet2.data,\n      setValue = _usePlacesAutocomplet.setValue,\n      clearSuggestions = _usePlacesAutocomplet.clearSuggestions;\n\n  var ref = useOnclickOutside(function () {\n    // When user clicks outside of the component, we can dismiss\n    // the searched suggestions by calling this method\n    clearSuggestions();\n  });\n\n  var handleInput = function handleInput(e) {\n    // Update the keyword of the input element\n    setValue(e.target.value);\n  };\n\n  var handleSelect = function handleSelect(_ref) {\n    var description = _ref.description;\n    return function () {\n      // When user selects a place, we can replace the keyword without request data from API\n      // by setting the second parameter to \"false\"\n      setValue(description, false);\n      clearSuggestions(); // Get latitude and longitude via utility functions\n\n      getGeocode({\n        address: description\n      }).then(function (results) {\n        var _getLatLng = getLatLng(results[0]),\n            lat = _getLatLng.lat,\n            lng = _getLatLng.lng;\n\n        console.log(\"üìç Coordinates: \", {\n          lat: lat,\n          lng: lng\n        });\n      });\n    };\n  };\n\n  var renderSuggestions = function renderSuggestions() {\n    return data.map(function (suggestion) {\n      var place_id = suggestion.place_id,\n          _suggestion$structure = suggestion.structured_formatting,\n          main_text = _suggestion$structure.main_text,\n          secondary_text = _suggestion$structure.secondary_text;\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: place_id,\n        onClick: handleSelect(suggestion),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      }, main_text), \" \", /*#__PURE__*/React.createElement(\"small\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 42\n        }\n      }, secondary_text));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: value,\n    onChange: handleInput,\n    disabled: !ready,\n    placeholder: \"Where are you going?\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), status === \"OK\" && /*#__PURE__*/React.createElement(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }\n  }, renderSuggestions()));\n};\n\nexport default PlacesAutocomplete; // return (\n//   <AutoComplete\n//     apiKey={myKey}\n//     style={{ width:\"90%\" }}\n//     onPlaceSelected={(place) => {\n//       console.log(place);\n//     }}\n//     options={{\n//       types: [\"(regions)\"],\n//       componentRestrictions: { country: \"ca\" },\n//     }}\n//     defaultValue=\"Toronto\"\n//     />\n// )","map":{"version":3,"names":["React","usePlacesAutocomplete","getGeocode","getLatLng","PlacesAutocomplete","requestOptions","debounce","ready","value","suggestions","status","data","setValue","clearSuggestions","ref","useOnclickOutside","handleInput","e","target","handleSelect","description","address","then","results","lat","lng","console","log","renderSuggestions","map","suggestion","place_id","structured_formatting","main_text","secondary_text"],"sources":["/Users/mariannebourcier/werun/react-front-end/src/components/Autocomplete.jsx"],"sourcesContent":["//import AutoComplete from \"react-google-autocomplete\";\nimport React from \"react\";\nimport usePlacesAutocomplete, {\n    getGeocode,\n    getLatLng,\n} from \"use-places-autocomplete\";\n//import useOnclickOutside from \"react-cool-onclickoutside\";\n  \n  const PlacesAutocomplete = () => {\n    const {\n      ready,\n      value,\n      suggestions: { status, data },\n      setValue,\n      clearSuggestions,\n    } = usePlacesAutocomplete({\n      requestOptions: {\n        /* Define search scope here */\n      },\n      debounce: 300,\n    });\n    const ref = useOnclickOutside(() => {\n      // When user clicks outside of the component, we can dismiss\n      // the searched suggestions by calling this method\n      clearSuggestions();\n    });\n  \n    const handleInput = (e) => {\n      // Update the keyword of the input element\n      setValue(e.target.value);\n    };\n  \n    const handleSelect =\n      ({ description }) =>\n      () => {\n        // When user selects a place, we can replace the keyword without request data from API\n        // by setting the second parameter to \"false\"\n        setValue(description, false);\n        clearSuggestions();\n  \n        // Get latitude and longitude via utility functions\n        getGeocode({ address: description }).then((results) => {\n          const { lat, lng } = getLatLng(results[0]);\n          console.log(\"üìç Coordinates: \", { lat, lng });\n        });\n      };\n  \n    const renderSuggestions = () =>\n      data.map((suggestion) => {\n        const {\n          place_id,\n          structured_formatting: { main_text, secondary_text },\n        } = suggestion;\n  \n        return (\n          <li key={place_id} onClick={handleSelect(suggestion)}>\n            <strong>{main_text}</strong> <small>{secondary_text}</small>\n          </li>\n        );\n      });\n  \n    return (\n      <div ref={ref}>\n        <input\n          value={value}\n          onChange={handleInput}\n          disabled={!ready}\n          placeholder=\"Where are you going?\"\n        />\n        {/* We can use the \"status\" to decide whether we should display the dropdown or not */}\n        {status === \"OK\" && <ul>{renderSuggestions()}</ul>}\n      </div>\n    );\n  };\n\n\nexport default PlacesAutocomplete;\n  // return (\n  //   <AutoComplete\n  //     apiKey={myKey}\n  //     style={{ width:\"90%\" }}\n  //     onPlaceSelected={(place) => {\n  //       console.log(place);\n  //     }}\n  //     options={{\n  //       types: [\"(regions)\"],\n  //       componentRestrictions: { country: \"ca\" },\n  //     }}\n  //     defaultValue=\"Toronto\"\n  //     />\n  // )\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,IACIC,UADJ,EAEIC,SAFJ,QAGO,yBAHP,C,CAIA;;AAEE,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;EAAA,4BAO3BH,qBAAqB,CAAC;IACxBI,cAAc,EAAE;MACd;IADc,CADQ;IAIxBC,QAAQ,EAAE;EAJc,CAAD,CAPM;EAAA,IAE7BC,KAF6B,yBAE7BA,KAF6B;EAAA,IAG7BC,KAH6B,yBAG7BA,KAH6B;EAAA,mDAI7BC,WAJ6B;EAAA,IAIdC,MAJc,0BAIdA,MAJc;EAAA,IAINC,IAJM,0BAINA,IAJM;EAAA,IAK7BC,QAL6B,yBAK7BA,QAL6B;EAAA,IAM7BC,gBAN6B,yBAM7BA,gBAN6B;;EAa/B,IAAMC,GAAG,GAAGC,iBAAiB,CAAC,YAAM;IAClC;IACA;IACAF,gBAAgB;EACjB,CAJ4B,CAA7B;;EAMA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAAO;IACzB;IACAL,QAAQ,CAACK,CAAC,CAACC,MAAF,CAASV,KAAV,CAAR;EACD,CAHD;;EAKA,IAAMW,YAAY,GAChB,SADIA,YACJ;IAAA,IAAGC,WAAH,QAAGA,WAAH;IAAA,OACA,YAAM;MACJ;MACA;MACAR,QAAQ,CAACQ,WAAD,EAAc,KAAd,CAAR;MACAP,gBAAgB,GAJZ,CAMJ;;MACAX,UAAU,CAAC;QAAEmB,OAAO,EAAED;MAAX,CAAD,CAAV,CAAqCE,IAArC,CAA0C,UAACC,OAAD,EAAa;QAAA,iBAChCpB,SAAS,CAACoB,OAAO,CAAC,CAAD,CAAR,CADuB;QAAA,IAC7CC,GAD6C,cAC7CA,GAD6C;QAAA,IACxCC,GADwC,cACxCA,GADwC;;QAErDC,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC;UAAEH,GAAG,EAAHA,GAAF;UAAOC,GAAG,EAAHA;QAAP,CAAhC;MACD,CAHD;IAID,CAZD;EAAA,CADF;;EAeA,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB;IAAA,OACxBjB,IAAI,CAACkB,GAAL,CAAS,UAACC,UAAD,EAAgB;MAAA,IAErBC,QAFqB,GAInBD,UAJmB,CAErBC,QAFqB;MAAA,4BAInBD,UAJmB,CAGrBE,qBAHqB;MAAA,IAGIC,SAHJ,yBAGIA,SAHJ;MAAA,IAGeC,cAHf,yBAGeA,cAHf;MAMvB,oBACE;QAAI,GAAG,EAAEH,QAAT;QAAmB,OAAO,EAAEZ,YAAY,CAACW,UAAD,CAAxC;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAASG,SAAT,CADF,oBAC+B;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAAQC,cAAR,CAD/B,CADF;IAKD,CAXD,CADwB;EAAA,CAA1B;;EAcA,oBACE;IAAK,GAAG,EAAEpB,GAAV;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACE;IACE,KAAK,EAAEN,KADT;IAEE,QAAQ,EAAEQ,WAFZ;IAGE,QAAQ,EAAE,CAACT,KAHb;IAIE,WAAW,EAAC,sBAJd;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADF,EAQGG,MAAM,KAAK,IAAX,iBAAmB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAKkB,iBAAiB,EAAtB,CARtB,CADF;AAYD,CAjED;;AAoEF,eAAexB,kBAAf,C,CACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}