{"ast":null,"code":"//import AutoComplete from \"react-google-autocomplete\";\nimport React from \"react\"; // import usePlacesAutocomplete, {\n//     getGeocode,\n//     getLatLng,\n// } from \"use-places-autocomplete\";\n// import useOnclickOutside from \"react-cool-onclickoutside\";\n//   const PlacesAutocomplete = () => {\n//     const {\n//       ready,\n//       value,\n//       suggestions: { status, data },\n//       setValue,\n//       clearSuggestions,\n//     } = usePlacesAutocomplete({\n//       requestOptions: {\n//         /* Define search scope here */\n//       },\n//       debounce: 300,\n//     });\n//     const ref = useOnclickOutside(() => {\n//       // When user clicks outside of the component, we can dismiss\n//       // the searched suggestions by calling this method\n//       clearSuggestions();\n//     });\n//     const handleInput = (e) => {\n//       // Update the keyword of the input element\n//       setValue(e.target.value);\n//     };\n//     const handleSelect =\n//       ({ description }) =>\n//       () => {\n//         // When user selects a place, we can replace the keyword without request data from API\n//         // by setting the second parameter to \"false\"\n//         setValue(description, false);\n//         clearSuggestions();\n//         // Get latitude and longitude via utility functions\n//         getGeocode({ address: description }).then((results) => {\n//           const { lat, lng } = getLatLng(results[0]);\n//           console.log(\"📍 Coordinates: \", { lat, lng });\n//         });\n//       };\n//     const renderSuggestions = () =>\n//       data.map((suggestion) => {\n//         const {\n//           place_id,\n//           structured_formatting: { main_text, secondary_text },\n//         } = suggestion;\n//         return (\n//           <li key={place_id} onClick={handleSelect(suggestion)}>\n//             <strong>{main_text}</strong> <small>{secondary_text}</small>\n//           </li>\n//         );\n//       });\n//     return (\n//       <div ref={ref}>\n//         <input\n//           value={value}\n//           onChange={handleInput}\n//           disabled={!ready}\n//           placeholder=\"Where are you going?\"\n//         />\n//         {/* We can use the \"status\" to decide whether we should display the dropdown or not */}\n//         {status === \"OK\" && <ul>{renderSuggestions()}</ul>}\n//       </div>\n//     );\n//   };\n// export default PlacesAutocomplete;\n//   // return (\n//   //   <AutoComplete\n//   //     apiKey={myKey}\n//   //     style={{ width:\"90%\" }}\n//   //     onPlaceSelected={(place) => {\n//   //       console.log(place);\n//   //     }}\n//   //     options={{\n//   //       types: [\"(regions)\"],\n//   //       componentRestrictions: { country: \"ca\" },\n//   //     }}\n//   //     defaultValue=\"Toronto\"\n//   //     />\n//   // )","map":{"version":3,"names":["React"],"sources":["/Users/mariannebourcier/werun/react-front-end/src/components/Autocomplete.jsx"],"sourcesContent":["//import AutoComplete from \"react-google-autocomplete\";\nimport React from \"react\";\n\n\n\n// import usePlacesAutocomplete, {\n//     getGeocode,\n//     getLatLng,\n// } from \"use-places-autocomplete\";\n// import useOnclickOutside from \"react-cool-onclickoutside\";\n  \n//   const PlacesAutocomplete = () => {\n//     const {\n//       ready,\n//       value,\n//       suggestions: { status, data },\n//       setValue,\n//       clearSuggestions,\n//     } = usePlacesAutocomplete({\n//       requestOptions: {\n//         /* Define search scope here */\n//       },\n//       debounce: 300,\n//     });\n//     const ref = useOnclickOutside(() => {\n//       // When user clicks outside of the component, we can dismiss\n//       // the searched suggestions by calling this method\n//       clearSuggestions();\n//     });\n  \n//     const handleInput = (e) => {\n//       // Update the keyword of the input element\n//       setValue(e.target.value);\n//     };\n  \n//     const handleSelect =\n//       ({ description }) =>\n//       () => {\n//         // When user selects a place, we can replace the keyword without request data from API\n//         // by setting the second parameter to \"false\"\n//         setValue(description, false);\n//         clearSuggestions();\n  \n//         // Get latitude and longitude via utility functions\n//         getGeocode({ address: description }).then((results) => {\n//           const { lat, lng } = getLatLng(results[0]);\n//           console.log(\"📍 Coordinates: \", { lat, lng });\n//         });\n//       };\n  \n//     const renderSuggestions = () =>\n//       data.map((suggestion) => {\n//         const {\n//           place_id,\n//           structured_formatting: { main_text, secondary_text },\n//         } = suggestion;\n  \n//         return (\n//           <li key={place_id} onClick={handleSelect(suggestion)}>\n//             <strong>{main_text}</strong> <small>{secondary_text}</small>\n//           </li>\n//         );\n//       });\n  \n//     return (\n//       <div ref={ref}>\n//         <input\n//           value={value}\n//           onChange={handleInput}\n//           disabled={!ready}\n//           placeholder=\"Where are you going?\"\n//         />\n//         {/* We can use the \"status\" to decide whether we should display the dropdown or not */}\n//         {status === \"OK\" && <ul>{renderSuggestions()}</ul>}\n//       </div>\n//     );\n//   };\n\n\n// export default PlacesAutocomplete;\n//   // return (\n//   //   <AutoComplete\n//   //     apiKey={myKey}\n//   //     style={{ width:\"90%\" }}\n//   //     onPlaceSelected={(place) => {\n//   //       console.log(place);\n//   //     }}\n//   //     options={{\n//   //       types: [\"(regions)\"],\n//   //       componentRestrictions: { country: \"ca\" },\n//   //     }}\n//   //     defaultValue=\"Toronto\"\n//   //     />\n//   // )\n"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}